using UnityEngine;
using UnityEditor;
using UnityEngine.SceneManagement;
using System.IO;
using System.Linq;
using System.Collections.Generic;

static public class MapCompiler
{
    static public Camera mainCamera;

    [MenuItem("js13k/Update Preview %#e")]
    static void triggerUpdate()
    {
        var cam = SceneView.lastActiveSceneView.camera;

        mainCamera.transform.position = cam.transform.position;
        mainCamera.transform.rotation = cam.transform.rotation;
        mainCamera.transform.localScale = cam.transform.localScale;
        mainCamera.fieldOfView = cam.fieldOfView;

        var trackNumber = SceneManager.GetActiveScene().name.Substring( 0, SceneManager.GetActiveScene().name.IndexOf("-") );

        string trackDataShader = "// Generated from track editor script"
            + "\n" + File.ReadAllText(Path.Combine(Application.dataPath, "..", "..", "src", "sdfDefs.hlsl"))
            + "\n" + Compile( false, "00" );

        string tracksGlsl = "// Generated by track editor Unity project"
            + "\n" + Compile( true, trackNumber );

        File.WriteAllText(Path.Combine(Application.dataPath, "Shaders", "trackData.gen.cginc"), trackDataShader);
        File.WriteAllText(Path.Combine(Application.dataPath, "..", "..", "tracks", "track"+trackNumber+".glsl"), tracksGlsl);

        AssetDatabase.Refresh();
    }

    static string Compile( bool glsl, string trackId )
    {
        var first = true;

        var objectLines = GameObject.FindObjectsOfType<MapObject>()
            .Where( y => y.transform.parent == null || y.transform.parent.GetComponent<MapObjectSmoothJoin>() == null )
            .Select( x => 
            {
                var y = first ? x.WriteShaderCall( glsl ) : x.WriteShaderLine( glsl );
                first = false;
                return y;
            });

        var smoothLines = GameObject.FindObjectsOfType<MapObjectSmoothJoin>()
            .Select( x => x.WriteShaderLine( glsl ));

        var lines = objectLines.Concat( smoothLines ).ToList();
        var firstLine = lines[0];
        lines.RemoveAt( 0 );

        var mapFunc = "vec2 Xmap( vec3 p )\n" +
        "{\n" +
            "vec2 d = " + firstLine + ";\n" +
            string.Join( "", lines ) + 
            "return d;\n" +
        "}\n";

        var result = getConstantLines( glsl, trackId ) + mapFunc;

        return result.Replace("vec3", glsl ? "vec3" : "float3").Replace("vec2", glsl ? "vec2" : "float2");
    }

    static string getConstantLines( bool glsl, string trackId )
    {
        var objs = GameObject.FindObjectsOfType<MapCheckpoint>();
        var fps = GameObject.FindObjectsOfType<MapFirstPersonRegion>();

        if( objs.Length != 4 ) 
            throw new System.Exception("Need 4 checkpoints");
        if( fps.Length != 1 ) 
            throw new System.Exception("Need 1 fps region");

        var vec3s = new List<string>();
        var vec4s = new List<string>();

        for( int i = 0; i < 4; ++i )
            vec3s.Add(
                string.Format("Xc"+i+" = vec3({0},{1},{2})", Utils.SmallNum(objs[i].transform.position.x), Utils.SmallNum(objs[i].transform.position.y), Utils.SmallNum(objs[i].transform.position.z))
            );

        for( int i = 0; i < 4; ++i )
        {
            var invQuat = Quaternion.Inverse( objs[i].transform.rotation );
            vec4s.Add(
                string.Format("Xf"+i+" = vec4({0},{1},{2},{3})", Utils.SmallNum(invQuat.x), Utils.SmallNum(invQuat.y), Utils.SmallNum(invQuat.z), Utils.SmallNum(invQuat.w))
            );
        }

        vec4s.Add(
            string.Format("Xp0 = vec4({0},{1},{2},{3})", Utils.SmallNum(fps[0].transform.position.x), Utils.SmallNum(fps[0].transform.position.y), Utils.SmallNum(fps[0].transform.position.z), Utils.SmallNum(fps[0].radius))
        );

        return
            (glsl ? "const vec3 " : "static const float3 ") + string.Join( ",", vec3s ).Replace("vec3", glsl ? "vec3" : "float3") + ";\n" +
            (glsl ? "const vec4 " : "static const float4 ") + string.Join( ",", vec4s ).Replace("vec4", glsl ? "vec4" : "float4") + ";\n";
    }
}