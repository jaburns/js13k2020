using UnityEngine;
using UnityEditor;
using UnityEngine.SceneManagement;
using System.IO;
using System.Linq;
using System.Collections.Generic;

public class TracingBounds
{
    public Vector3 position;
    public Quaternion invRotation;
    public Vector3 extents;

    public string WriteTraceLine( int bit )
    {
        var b = this;
        var result = string.Format(
            "traceBox( ro, rd, dist, g_traceBits."+Utils.BitField(bit,0)+", i_BIT"+Utils.BitField(bit,1)+", {0},{1},{2},{3},{4},{5},{6},{7},{8},{9} );\n",
            Utils.SmallNum( b.invRotation.x, true ), Utils.SmallNum( b.invRotation.y, true ), Utils.SmallNum( b.invRotation.z, true ), Utils.SmallNum( b.invRotation.w, true ),
            Utils.SmallNum( b.position.x, true ), Utils.SmallNum( b.position.y, true ), Utils.SmallNum( b.position.z, true ),
            Utils.SmallNum( b.extents.x, true ), Utils.SmallNum( b.extents.y, true ), Utils.SmallNum( b.extents.z, true )
        );
        return result;
    }
}

static public class MapCompiler
{
    const int MAP_SMALLEST_BIT = 0; 

    static public Camera mainCamera;

    [MenuItem("js13k/Update Preview %#e")]
    static void triggerUpdate()
    {
        var cam = SceneView.lastActiveSceneView.camera;

        mainCamera.transform.position = cam.transform.position;
        mainCamera.transform.rotation = cam.transform.rotation;
        mainCamera.transform.localScale = cam.transform.localScale;
        mainCamera.fieldOfView = cam.fieldOfView;

        var trackNumber = SceneManager.GetActiveScene().name.Substring( 0, SceneManager.GetActiveScene().name.IndexOf("-") );

        string trackDataShader = "// Generated from track editor script"
            + "\n" + File.ReadAllText(Path.Combine(Application.dataPath, "..", "..", "src", "sdfDefs.hlsl"))
            + "\n" + Compile( false, "00" );

        string tracksGlsl = "// Generated by track editor Unity project"
            + "\n" + Compile( true, trackNumber );

        File.WriteAllText(Path.Combine(Application.dataPath, "Shaders", "trackData.gen.cginc"), trackDataShader);
        File.WriteAllText(Path.Combine(Application.dataPath, "..", "..", "tracks", "track"+trackNumber+".glsl"), tracksGlsl);

        AssetDatabase.Refresh();
    }

    static string Compile( bool glsl, string trackId )
    {
        var result = getConstants( glsl, trackId ) +
            getMapFunc( glsl, trackId ) +
            getTraceFunc( glsl, trackId );

        return result.Replace("vec3", glsl ? "vec3" : "float3").Replace("vec2", glsl ? "vec2" : "float2");
    }

    static string getMapFunc( bool glsl, string trackId )
    {
        int bit = MAP_SMALLEST_BIT;

        var objectLines = GameObject.FindObjectsOfType<MapObject>()
            .Where( y => y.transform.parent == null || y.transform.parent.GetComponent<MapObjectSmoothJoin>() == null )
            .Select( x => x.WriteShaderLine());

        var smoothLines = GameObject.FindObjectsOfType<MapObjectSmoothJoin>()
            .Select( x => x.WriteShaderLine( glsl ));

        var lines = objectLines.Concat( smoothLines ).Select( x => addMapLineBitCondition( x, bit++ )).ToList();

        return "vec2 Xm( vec3 p )\n" +
        "{\n" +
            "vec2 d = vec2( 10000, 0 );\n" +
            string.Join( "", lines ) + 
            "return d;\n" +
        "}\n";
    }

    static string getTraceFunc( bool glsl, string trackId )
    {
        int bit = MAP_SMALLEST_BIT;

        var objectBounds = GameObject.FindObjectsOfType<MapObject>()
            .Where( y => y.transform.parent == null || y.transform.parent.GetComponent<MapObjectSmoothJoin>() == null )
            .Select( x => x.GetTracingBounds() );

        var smoothBounds = GameObject.FindObjectsOfType<MapObjectSmoothJoin>()
            .Select( x => x.GetTracingBounds() );

        var lines = objectBounds.Concat( smoothBounds ).Select( x => x.WriteTraceLine( bit++ )).ToList();

        return "float Xt( vec3 ro, vec3 rd, float dist )\n" +
        "{\n" +
            string.Join( "", lines ) + 
            "return dist < 10000. ? dist : -1.;\n" +
        "}\n";
    }

    static string addMapLineBitCondition( string line, int bit )
    {
        return "if( mod( g_traceBits."+Utils.BitField(bit,0)+" / i_BIT"+Utils.BitField(bit,1)+", 2. ) >= 1. )\n" + line;
    }

    static string getConstants( bool glsl, string trackId )
    {
        var objs = GameObject.FindObjectsOfType<MapCheckpoint>();
        var fps = GameObject.FindObjectsOfType<MapFirstPersonRegion>();

        if( objs.Length != 4 ) 
            throw new System.Exception("Need 4 checkpoints");
        if( fps.Length != 1 ) 
            throw new System.Exception("Need 1 fps region");

        var vec3s = new List<string>();
        var vec4s = new List<string>();

        for( int i = 0; i < 4; ++i )
            vec3s.Add(
                string.Format("Xc"+i+" = vec3({0},{1},{2})", Utils.SmallNum(objs[i].transform.position.x), Utils.SmallNum(objs[i].transform.position.y), Utils.SmallNum(objs[i].transform.position.z))
            );

        for( int i = 0; i < 4; ++i )
        {
            var invQuat = Quaternion.Inverse( objs[i].transform.rotation );
            vec4s.Add(
                string.Format("Xf"+i+" = vec4({0},{1},{2},{3})", Utils.SmallNum(invQuat.x), Utils.SmallNum(invQuat.y), Utils.SmallNum(invQuat.z), Utils.SmallNum(invQuat.w))
            );
        }

        vec4s.Add(
            string.Format("Xp0 = vec4({0},{1},{2},{3})", Utils.SmallNum(fps[0].transform.position.x), Utils.SmallNum(fps[0].transform.position.y), Utils.SmallNum(fps[0].transform.position.z), Utils.SmallNum(fps[0].radius))
        );

        return
            (glsl ? "const vec3 " : "static const float3 ") + string.Join( ",", vec3s ).Replace("vec3", glsl ? "vec3" : "float3") + ";\n" +
            (glsl ? "const vec4 " : "static const float4 ") + string.Join( ",", vec4s ).Replace("vec4", glsl ? "vec4" : "float4") + ";\n";
    }
}